# Prepares MacOSX desktop.
# Tested on amd64 and arm64 MacOSX.
- name: prepare_macosx_desktop
  hosts: all
  vars:
    delay_time: 3                               # delay time in seconds between retries
    install_aws_tools: true                     # install Amazon Cloud tools
    install_appstore_packages: true             # install App Store apps
    install_azure_tools: true                   # install Microsoft Azure tools
    install_extra_tools: true                   # install extra tools (unpack section)
    install_gcloud_tools: true                  # install Google Cloud tools
    install_oci_tools: true                     # install Oracle Cloud Infrastructure tools
    install_alibaba_tools: true                 # install Alibaba Cloud tools
    install_npm: true                           # install npm packages
    install_rosetta: true                       # install Rosetta 2
    install_osx_defaults: true                  # install OSX defaults
    retries_count: 2                            # how many retries
    update_homebrew_packages: true              # should we upgrade all brew packages
    update_homebrew: true                       # should be update brew itself in first step
    ansible_become_password: "{{ sudo_password }}"
  become: false
  gather_facts: false
  pre_tasks:
  # ansible version
    - name: verify_ansible_meets_version_requirements
      ansible.builtin.assert:
        that: "ansible_version.full is version('2.10', '>=')"
        msg: >
          "You must update Ansible to at least 2.10 to use this version of playbook"
      tags:
        - assert
    # setup module - we need these facts
    - name: run_initial_setup_instead_of_gather_facts
      ansible.builtin.setup:
        gather_timeout: 45
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      register: r_setup_status
      until: r_setup_status is success
      tags:
        - assert
    # check if running on MacOSX
    - name: running_on_macos
      ansible.builtin.assert:
        that: "ansible_distribution == 'MacOSX'"
        msg: >
          "You need to run it on MacBook"
      when: ansible_distribution is defined
      tags:
        - assert
    - name: set_fact_for_architecture
      ansible.builtin.set_fact:
        ansible_architecture: "{{ ansible_architecture | default('x86_64', true) }}"
      when: r_setup_status is success and ansible_distribution is defined
    - name: load_playbook_vars_depending_on_distribution
      ansible.builtin.include_vars:
        dir: .
        files_matching: "macbook-devops_.*.yaml"
      any_errors_fatal: true
      ignore_errors: false
      register: r_load_vars
      until: r_load_vars is success
      changed_when: false
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      failed_when: r_load_vars is failed or r_load_vars.ansible_included_var_files is not defined
      tags:
        - assert
  tasks:
    - name: display_basic_information
      ansible.builtin.debug:
        msg:
          - "MacOSX major version         : {{ ansible_distribution_major_version }}"
          - "MacOSX release               : {{ ansible_distribution_release }}"
          - "Ansible version              : {{ ansible_version.full }}"
          - "Ansible architecture         : {{ ansible_architecture }}"
    - name: wait_15_seconds
      ansible.builtin.pause:
        seconds: 15
        prompt: "Check variables - last chance to abort in 15 seconds"
    # Start
    - name: install_rosetta
      ansible.builtin.shell:
        cmd: "/usr/sbin/softwareupdate --install-rosetta --agree-to-license"
      when: (install_rosetta is defined and install_rosetta is true) and (ansible_architecture is defined and ansible_architecture == 'arm64')
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      register: r_install_rosetta
      until: r_install_rosetta is success
      changed_when: false
      any_errors_fatal: false
      tags:
        - install
        - essential
        - softwareupdate
    # Update homebrew
    - name: update_homebrew
      community.general.homebrew:
        update_homebrew: true
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      register: r_update_homebrew
      until: r_update_homebrew is success
      any_errors_fatal: false
      when: update_homebrew
      tags:
        - packages
        - base
        - itself
        - homebrew
        - essential
    # Install essential taps
    - name: install_homebrew_taps
      community.general.homebrew_tap:
        name: "{{ item.name }}"
        state: "{{ item.state | default('present') }}"
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      register: r_install_taps
      until: r_install_taps is success
      any_errors_fatal: false
      loop: "{{ homebrew_taps }}"
      tags:
        - packages
        - base
        - taps
        - homebrew
        - essential
    # Install homebrew essential formulae
    - name: install_homebrew_formulae
      community.general.homebrew:
        name: "{{ item.name }}"
        state: "{{ item.state | default('latest') }}"
      loop: "{{ homebrew_formulae_essential }}"
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      register: r_homebrew_formulae_essential
      until: r_homebrew_formulae_essential is success
      any_errors_fatal: false
      ignore_errors: true
      tags:
        - packages
        - base
        - formulae
        - homebrew
        - essential
  # Install homebrew optional formulae
    - name: install_homebrew_optional_formulae
      community.general.homebrew:
        name: "{{ item.name }}"
        state: "{{ item.state | default('latest') }}"
      loop: "{{ homebrew_formulae_optional }}"
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      register: r_homebrew_formulae_optional
      until: r_homebrew_formulae_optional is success
      any_errors_fatal: false
      ignore_errors: true
      tags:
        - packages
        - base
        - formulae
        - homebrew
        - optional
  # Install homebrew casks
    - name: install_homebrew_casks
      community.general.homebrew_cask:
        name: "{{ item.name }}"
        state: "{{ item.state | default('present') }}"
        accept_external_apps: "{{ item.accept_external_apps | default(true) }}"
        sudo_password: "{{ sudo_password }}"
      loop: "{{ homebrew_casks }}"
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      register: r_homebrew_casks
      until: r_homebrew_casks is success
      any_errors_fatal: false
      ignore_errors: true
      tags:
        - packages
        - base
        - homebrew
        - casks
        - essential
  # install homebrew casks - optional
    - name: install_homebrew_casks_optional
      community.general.homebrew_cask:
        name: "{{ item.name }}"
        state: "{{ item.state | default('present') }}"
        accept_external_apps: "{{ item.accept_external_apps | default(true) }}"
        sudo_password: "{{ sudo_password }}"
      loop: "{{ homebrew_casks_optional }}"
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      register: r_homebrew_casks_optional
      until: r_homebrew_casks_optional is success
      any_errors_fatal: false
      ignore_errors: true
      tags:
        - packages
        - base
        - homebrew
        - casks
        - optional
  # Install homebrew casks for amd64 or arm64 with rosetta 2
    - name: install_homebrew_casks_amd64
      community.general.homebrew_cask:
        name: "{{ item.name }}"
        state: "{{ item.state | default('present') }}"
        accept_external_apps: "{{ item.accept_external_apps | default(true) }}"
        sudo_password: "{{ sudo_password }}"
      loop: "{{ homebrew_casks_amd64 }}"
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      register: r_homebrew_casks_amd64
      until: r_homebrew_casks_amd64 is success
      when: (ansible_architecture is defined and ansible_architecture == 'x86_64') or (ansible_architecture is defined and ansible_architecture == 'arm64' and r_install_rosetta is defined and r_install_rosetta is success) # noqa 204
      any_errors_fatal: false
      ignore_errors: true
      tags:
        - packages
        - base
        - homebrew
        - casks
        - essential
        - rosetta
  # Install homebrew azure formulae
    - name: install_azure_formulae_and_casks
      when: install_azure_tools is defined and install_azure_tools
      block:
        - name: install_homebrew_azure_formulae
          community.general.homebrew:
            name: "{{ item.name }}"
            state: "{{ item.state | default('latest') }}"
          loop: "{{ homebrew_azure.formulae if homebrew_azure.formulae is iterable }}"
          loop_control:
            extended: true
          retries: "{{ retries_count }}"
          delay: "{{ delay_time }}"
          register: r_homebrew_azure_formulae
          until: r_homebrew_azure_formulae is success
          when: (homebrew_azure.formulae is defined and homebrew_azure.formulae is iterable)
          any_errors_fatal: false
          ignore_errors: true
          tags:
            - packages
            - formulae
            - homebrew
            - azure
        - name: install_homebrew_azure_casks
          community.general.homebrew_cask:
            name: "{{ item.name }}"
            state: "{{ item.state | default('latest') }}"
            accept_external_apps: "{{ item.accept_external_apps | default(true) }}"
            sudo_password: "{{ sudo_password }}"
          loop: "{{ homebrew_azure.casks if homebrew_azure.formulae is iterable }}"
          retries: "{{ retries_count }}"
          delay: "{{ delay_time }}"
          register: r_homebrew_azure_casks
          until: r_homebrew_azure_casks is success
          when: (homebrew_azure.casks is defined and homebrew_azure.casks is iterable)
          any_errors_fatal: false
          ignore_errors: true
          tags:
            - packages
            - casks
            - homebrew
            - azure
  # Install homebrew aws formulae
    - name: install_aws_formulae_and_casks
      when: install_aws_tools is defined and install_aws_tools
      block:
        - name: install_homebrew_aws_formulae
          community.general.homebrew:
            name: "{{ item.name }}"
            state: "{{ item.state | default('latest') }}"
          loop: "{{ homebrew_aws.formulae if homebrew_aws.formulae is iterable }}"
          loop_control:
            extended: true
          retries: "{{ retries_count }}"
          delay: "{{ delay_time }}"
          register: r_homebrew_aws_formulae
          until: r_homebrew_aws_formulae is success
          when: (homebrew_aws.formulae is defined and homebrew_aws.formulae is iterable)
          any_errors_fatal: false
          ignore_errors: true
          tags:
            - packages
            - formulae
            - homebrew
            - aws
        - name: install_homebrew_aws_casks
          community.general.homebrew_cask:
            name: "{{ item.name }}"
            state: "{{ item.state | default('latest') }}"
            accept_external_apps: "{{ item.accept_external_apps | default(true) }}"
            sudo_password: "{{ sudo_password }}"
          loop: "{{ homebrew_aws.casks if homebrew_aws.formulae is iterable }}"
          retries: "{{ retries_count }}"
          delay: "{{ delay_time }}"
          register: r_homebrew_aws_casks
          until: r_homebrew_aws_casks is success
          when: (homebrew_aws.casks is defined and homebrew_aws.casks is iterable)
          any_errors_fatal: false
          ignore_errors: true
          tags:
            - packages
            - casks
            - homebrew
            - aws
  # Install homebrew oci formulae
    - name: install_oci_formulae_and_casks
      when: install_oci_tools is defined and install_oci_tools
      block:
        - name: install_homebrew_oci_formulae
          community.general.homebrew:
            name: "{{ item.name }}"
            state: "{{ item.state | default('latest') }}"
          loop: "{{ homebrew_oci.formulae if homebrew_oci.formulae is iterable }}"
          loop_control:
            extended: true
          retries: "{{ retries_count }}"
          delay: "{{ delay_time }}"
          register: r_homebrew_oci_formulae
          until: r_homebrew_oci_formulae is success
          when: (homebrew_oci.formulae is defined and homebrew_oci.formulae is iterable)
          any_errors_fatal: false
          ignore_errors: true
          tags:
            - packages
            - formulae
            - homebrew
            - oci
        - name: install_homebrew_oci_casks
          community.general.homebrew_cask:
            name: "{{ item.name }}"
            state: "{{ item.state | default('latest') }}"
            accept_external_apps: "{{ item.accept_external_apps | default(true) }}"
            sudo_password: "{{ sudo_password }}"
          loop: "{{ homebrew_oci.casks if homebrew_oci.formulae is iterable }}"
          retries: "{{ retries_count }}"
          delay: "{{ delay_time }}"
          register: r_homebrew_oci_casks
          until: r_homebrew_oci_casks is success
          when: (homebrew_oci.casks is defined and homebrew_oci.casks is iterable)
          any_errors_fatal: false
          ignore_errors: true
          tags:
            - packages
            - casks
            - homebrew
            - oci
  # Install homebrew gcloud formulae
    - name: install_gcloud_formulae_and_casks
      when: install_gcloud_tools is defined and install_gcloud_tools
      block:
        - name: install_homebrew_gcloud_formulae
          community.general.homebrew:
            name: "{{ item.name }}"
            state: "{{ item.state | default('latest') }}"
          loop: "{{ homebrew_gcloud.formulae if homebrew_gcloud.formulae is iterable }}"
          loop_control:
            extended: true
          retries: "{{ retries_count }}"
          delay: "{{ delay_time }}"
          register: r_homebrew_gcloud_formulae
          until: r_homebrew_gcloud_formulae is success
          when: (homebrew_gcloud.formulae is defined and homebrew_gcloud.formulae is iterable)
          any_errors_fatal: false
          ignore_errors: true
          tags:
            - packages
            - formulae
            - homebrew
            - gcloud
        - name: install_homebrew_gcloud_casks
          community.general.homebrew_cask:
            name: "{{ item.name }}"
            state: "{{ item.state | default('latest') }}"
            accept_external_apps: "{{ item.accept_external_apps | default(true) }}"
            sudo_password: "{{ sudo_password }}"
          loop: "{{ homebrew_gcloud.casks if homebrew_gcloud.formulae is iterable }}"
          retries: "{{ retries_count }}"
          delay: "{{ delay_time }}"
          register: r_homebrew_gcloud_casks
          until: r_homebrew_gcloud_casks is success
          when: (homebrew_gcloud.casks is defined and homebrew_gcloud.casks is iterable)
          any_errors_fatal: false
          ignore_errors: true
          tags:
            - packages
            - casks
            - homebrew
            - gcloud
  # Install homebrew alibaba formulae
    - name: install_alibaba_formulae_and_casks
      when: install_alibaba_tools is defined and install_alibaba_tools
      block:
        - name: install_homebrew_alibaba_formulae
          community.general.homebrew:
            name: "{{ item.name }}"
            state: "{{ item.state | default('latest') }}"
          loop: "{{ homebrew_alibaba.formulae if homebrew_alibaba.formulae is iterable }}"
          loop_control:
            extended: true
          retries: "{{ retries_count }}"
          delay: "{{ delay_time }}"
          register: r_homebrew_alibaba_formulae
          until: r_homebrew_alibaba_formulae is success
          when: (homebrew_alibaba.formulae is defined and homebrew_alibaba.formulae is iterable)
          any_errors_fatal: false
          ignore_errors: true
          tags:
            - packages
            - formulae
            - homebrew
            - alibaba
        - name: install_homebrew_alibaba_casks
          community.general.homebrew_cask:
            name: "{{ item.name }}"
            state: "{{ item.state | default('latest') }}"
            accept_external_apps: "{{ item.accept_external_apps | default(true) }}"
            sudo_password: "{{ sudo_password }}"
          loop: "{{ homebrew_alibaba.casks if homebrew_alibaba.formulae is iterable }}"
          retries: "{{ retries_count }}"
          delay: "{{ delay_time }}"
          register: r_homebrew_alibaba_casks
          until: r_homebrew_alibaba_casks is success
          when: (homebrew_alibaba.casks is defined and homebrew_alibaba.casks is iterable)
          any_errors_fatal: false
          ignore_errors: true
          tags:
            - packages
            - casks
            - homebrew
            - alibaba
    - name: install_appstore_packages
      community.general.mas:
        id: "{{ item.id }}"
        state: "{{ item.state | default('present') }}"
        upgrade_all: no
      environment:
        PATH: "/usr/local/bin:/opt/homebrew/bin:{{ ansible_env.PATH }}"
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      loop: "{{ appstore_packages if appstore_packages is iterable }}"
      register: r_appstore_packages
      until: r_appstore_packages is success
      when: (appstore_packages is defined and appstore_packages is iterable) and (install_appstore_packages is defined and install_appstore_packages)
      any_errors_fatal: false
      ignore_errors: true
      tags:
        - packages
        - appstore
  # Upgrade homebrew packages
    - name: upgrade_homebrew_packages
      community.general.homebrew:
        upgrade_all: true
        upgrade_options:
          - debug
          - verbose
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      register: r_upgrade_homebrew_packages
      until: r_upgrade_homebrew_packages is success
      any_errors_fatal: false
      ignore_errors: true
      when: upgrade_homebrew_packages
      tags:
        - packages
        - base
        - itself
        - upgrade
        - essential
      become: true
    - name: install_and_upgrade_pip_packages
      ansible.builtin.pip:
        name: "{{ item }}"
        extra_args: --upgrade --upgrade-strategy=only-if-needed --ignore-installed
        executable: "{{ pip_executable }}"
      loop: "{{ pip }}"
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      register: r_pip
      until: r_pip is success
      any_errors_fatal: false
      ignore_errors: true
      when: pip_executable is defined
      tags:
        - packages
        - base
        - python
    - name: install_npm_packages
      community.general.npm:
        name: "{{ item.name | string }}"
        state: "{{ item.state | string }}"
        global: yes
      loop: "{{ npm_packages }}"
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      register: r_install_npm
      until: r_install_npm is success
      any_errors_fatal: false
      failed_when: false
      when: install_npm is defined and install_npm
      environment:
        PATH: "/usr/local/bin:/opt/homebrew/bin:{{ ansible_env.PATH }}"
      tags:
        - packages
        - npm
    # download and unflatten
    - name: download_unarchive_flatten
      ansible.builtin.include_tasks: ./tasks/download_files.yml
      loop: "{{ unpack }}"
      args:
        apply:
          become: true
          become_user: root
          become_method: sudo
          tags:
            - downloads
            - apps
            - tasks
      when: (ansible_architecture is defined) and (install_extra_tools is defined and install_extra_tools)
      tags:
        - extra_tools
        - downloads
        - unpack
    - name: manage_osx_defaults
      community.general.osx_defaults:
        domain: "{{ item.domain }}"
        key: "{{ item.key }}"
        type: "{{ item.type }}"
        value: "{{ item.value }}"
        state: "{{ item.state | default('present') }}"
      loop: "{{ osx_defaults }}"
      when: osx_defaults is iterable and install_osx_defaults
      register: r_osx_defaults
      until: r_osx_defaults is success
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      become: true
      tags:
        - osx_defaults

